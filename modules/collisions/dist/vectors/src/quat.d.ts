import { mat3 } from './mat3';
import { mat4 } from './mat4';
import { vec3 } from './vec3';
export declare class quat extends Float32Array {
    constructor(values?: number[]);
    static readonly identity: quat;
    get x(): number;
    set x(x: number);
    get y(): number;
    set y(y: number);
    get z(): number;
    set z(z: number);
    get w(): number;
    set w(w: number);
    get yaw(): number;
    set yaw(yaw: number);
    get pitch(): number;
    set pitch(pitch: number);
    get roll(): number;
    set roll(roll: number);
    get length(): number;
    get squaredLength(): number;
    copy(dest?: null | quat): quat;
    reset(): quat;
    calculateW(): quat;
    invert(dest?: null | quat): quat;
    conjugate(dest?: null | quat): quat;
    normalize(dest?: null | quat): quat;
    equals(q: quat, threshold?: number): boolean;
    add(other: quat, dest?: null | quat): quat;
    multiply(other: quat, dest?: null | quat): quat;
    toMat3(dest?: null | mat3): mat3;
    toMat4(dest?: null | mat4): mat4;
    static dot(q1: quat, q2: quat): number;
    static add(q1: quat, q2: quat, dest?: null | quat): quat;
    static multiply(q1: quat, q2: quat, dest?: null | quat): quat;
    static cross(q1: quat, q2: quat, dest?: null | quat): quat;
    static mix(q1: quat, q2: quat, time: number, dest?: null | quat): quat;
    static fromAxisAngle(axis: vec3, angle: number, dest?: null | quat): quat;
    static fromEulerAngles(yaw: number, pitch: number, roll: number, dest?: null | quat): quat;
}
