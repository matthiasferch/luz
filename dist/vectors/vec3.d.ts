import { mat3 } from './mat3';
export declare class vec3 extends Float32Array {
    static readonly zero: Readonly<vec3>;
    static readonly one: Readonly<vec3>;
    static readonly right: Readonly<vec3>;
    static readonly up: Readonly<vec3>;
    static readonly forward: Readonly<vec3>;
    static readonly axes: Readonly<vec3[]>;
    static readonly infinity: Readonly<vec3>;
    constructor(values?: number[]);
    get x(): number;
    set x(x: number);
    get y(): number;
    set y(y: number);
    get z(): number;
    set z(z: number);
    get xyz(): number[];
    set xyz(xyz: number[]);
    get length(): number;
    get squaredLength(): number;
    reset(): vec3;
    copy(dest?: null | vec3): vec3;
    negate(dest?: null | vec3): vec3;
    equals(vector: vec3, threshold?: number): boolean;
    add(vector: vec3, dest?: null | vec3): vec3;
    subtract(vector: vec3, dest?: null | vec3): vec3;
    multiply(vector: vec3, dest?: null | vec3): vec3;
    divide(vector: vec3, dest?: null | vec3): vec3;
    scale(scalar: number, dest?: null | vec3): vec3;
    normalize(dest?: null | vec3): vec3;
    reflect(normal: vec3, dest?: null | vec3): vec3;
    transform(matrix: mat3, dest?: null | vec3): vec3;
    toJSON(): number[];
    static absolute(vector: vec3, dest?: null | vec3): vec3;
    static minimum(vector: vec3, vector2: vec3, dest?: null | vec3): vec3;
    static maximum(vector: vec3, vector2: vec3, dest?: null | vec3): vec3;
    static cross(vector: vec3, vector2: vec3, dest?: null | vec3): vec3;
    static dot(vector: vec3, vector2: vec3): number;
    static distance(vector: vec3, vector2: vec3): number;
    static squaredDistance(vector: vec3, vector2: vec3): number;
    static direction(vector: vec3, vector2: vec3, dest?: null | vec3): vec3;
    static mix(vector: vec3, vector2: vec3, time: number, dest?: null | vec3): vec3;
    static add(vector: vec3, vector2: vec3, dest?: null | vec3): vec3;
    static subtract(vector: vec3, vector2: vec3, dest?: null | vec3): vec3;
    static multiply(vector: vec3, vector2: vec3, dest?: null | vec3): vec3;
    static divide(vector: vec3, vector2: vec3, dest?: null | vec3): vec3;
    static scale(vector: vec3, scalar: number, dest?: null | vec3): vec3;
    static normalize(vector: vec3, dest?: null | vec3): vec3;
    static sum(...vectors: vec3[]): vec3;
    static difference(...vectors: vec3[]): vec3;
    static product(...vectors: vec3[]): vec3;
    static division(...vectors: vec3[]): vec3;
}
