import { mat2 } from './mat2';
export declare class vec2 extends Float32Array {
    static readonly zero: Readonly<vec2>;
    static readonly one: Readonly<vec2>;
    static readonly right: Readonly<vec2>;
    static readonly up: Readonly<vec2>;
    static readonly axes: Readonly<vec2[]>;
    static readonly infinity: Readonly<vec2>;
    constructor(values?: number[]);
    get x(): number;
    set x(x: number);
    get y(): number;
    set y(y: number);
    get xy(): number[];
    set xy(xy: number[]);
    get length(): number;
    get squaredLength(): number;
    reset(): vec2;
    copy(dest?: null | vec2): vec2;
    negate(dest?: null | vec2): vec2;
    equals(vector: vec2, threshold?: number): boolean;
    add(vector: vec2, dest?: null | vec2): vec2;
    subtract(vector: vec2, dest?: null | vec2): vec2;
    multiply(vector: vec2, dest?: null | vec2): vec2;
    divide(vector: vec2, dest?: null | vec2): vec2;
    scale(scalar: number, dest?: null | vec2): vec2;
    normalize(dest?: null | vec2): vec2;
    transform(matrix: mat2, dest?: null | vec2): vec2;
    toJSON(): number[];
    static absolute(vector: vec2, dest?: null | vec2): vec2;
    static minimum(vector: vec2, vector2: vec2, dest?: null | vec2): vec2;
    static maximum(vector: vec2, vector2: vec2, dest?: null | vec2): vec2;
    static cross(vector: vec2, vector2: vec2, dest?: null | vec2): vec2;
    static dot(vector: vec2, vector2: vec2): number;
    static distance(vector: vec2, vector2: vec2): number;
    static squaredDistance(vector: vec2, vector2: vec2): number;
    static direction(vector: vec2, vector2: vec2, dest?: null | vec2): vec2;
    static mix(vector: vec2, vector2: vec2, time: number, dest?: null | vec2): vec2;
    static add(vector: vec2, vector2: vec2, dest?: null | vec2): vec2;
    static subtract(vector: vec2, vector2: vec2, dest?: null | vec2): vec2;
    static multiply(vector: vec2, vector2: vec2, dest?: null | vec2): vec2;
    static divide(vector: vec2, vector2: vec2, dest?: null | vec2): vec2;
    static scale(vector: vec2, scalar: number, dest?: null | vec2): vec2;
    static normalize(vector: vec2, dest?: null | vec2): vec2;
    static sum(...vectors: vec2[]): vec2;
    static difference(...vectors: vec2[]): vec2;
    static product(...vectors: vec2[]): vec2;
    static division(...vectors: vec2[]): vec2;
}
