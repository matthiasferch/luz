import { mat3 } from './mat3';
import { quat } from './quat';
import { vec3 } from './vec3';
import { vec4 } from './vec4';
export declare class mat4 extends Float32Array {
    constructor(values?: number[]);
    static readonly identity: mat4;
    get determinant(): number;
    copy(dest?: null | mat4): mat4;
    column(index: number, dest?: null | vec4): vec4;
    equals(other: mat4, threshold?: number): boolean;
    reset(): mat4;
    transpose(dest?: null | mat4): mat4;
    invert(dest?: null | mat4): null | mat4;
    multiply(other: mat4, dest?: null | mat4): mat4;
    transform(vector: vec4, dest?: null | vec4): vec4;
    transformVec3(vector: vec3, dest?: null | vec3): vec3;
    toMat3(dest?: null | mat3): mat3;
    scale(vector: vec3, dest?: null | mat4): mat4;
    rotate(angle: number, axis: vec3, dest?: null | mat4): null | mat4;
    translate(vector: vec3, dest?: null | mat4): mat4;
    decompose(translation: vec3, rotation: mat3, scaling?: null | vec3): void;
    static construct(rotation: quat, translation: vec3, dest?: null | mat4): mat4;
    static multiply(m1: mat4, m2: mat4, dest?: null | mat4): mat4;
    static frustum(left: number, right: number, bottom: number, top: number, near: number, far: number, dest?: null | mat4): mat4;
    static perspective(fov: number, aspect: number, near: number, far: number, dest?: null | mat4): mat4;
    static orthographic(left: number, right: number, bottom: number, top: number, near: number, far: number, dest?: null | mat4): mat4;
    static reflection(plane: vec4, dest?: mat4): mat4;
    static lookAt(eye: vec3, target: vec3, up?: vec3, dest?: null | mat4): mat4;
}
